{"ast":null,"code":"import _defineProperty from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _handleActions;\n\nimport { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { getPostAPIByUserId } from '../../../src/api/post';\nvar GET_POST_PENDING = 'post/GET_POST_PENDING';\nvar GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\nvar GET_POST_FAILURE = 'post/GET_POST_FAILURE';\n\nvar getPostPending = function getPostPending() {\n  return {\n    type: GET_POST_PENDING\n  };\n};\n\nvar getPostSuccess = function getPostSuccess(text) {\n  return {\n    type: GET_POST_SUCCESS,\n    payload: text\n  };\n};\n\nvar getPostFailure = function getPostFailure() {\n  return {\n    type: GET_POST_FAILURE\n  };\n};\n\nexport var getPost = function getPost(userId) {\n  return function (dispatch, getState) {\n    dispatch(getPostPending());\n    return getPostAPIByUserId(userId).then(function (text) {\n      dispatch(getPostSuccess(text));\n      return text;\n    }).catch(function (err) {\n      dispatch(getPostFailure());\n    });\n  };\n};\nvar initialState = {\n  pending: false,\n  error: false,\n  data: {\n    title: '',\n    body: ''\n  }\n};\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, GET_POST_PENDING, function (state, action) {\n  return _objectSpread({}, state, {\n    pending: true\n  });\n}), _defineProperty(_handleActions, GET_POST_SUCCESS, function (state, action) {\n  var _action$payload$data = action.payload.data,\n      title = _action$payload$data.title,\n      body = _action$payload$data.body;\n  return _objectSpread({}, state, {\n    pending: false,\n    data: {\n      title: title,\n      body: body\n    }\n  });\n}), _defineProperty(_handleActions, GET_POST_FAILURE, function (state, action) {\n  return _objectSpread({}, state, {\n    pending: false,\n    error: true\n  });\n}), _handleActions), initialState);","map":{"version":3,"sources":["/Users/seonghunshin/Documents/react-practice/src/store/modules/post.js"],"names":["createAction","handleActions","produce","getPostAPIByUserId","GET_POST_PENDING","GET_POST_SUCCESS","GET_POST_FAILURE","getPostPending","type","getPostSuccess","text","payload","getPostFailure","getPost","userId","dispatch","getState","then","catch","err","initialState","pending","error","data","title","body","state","action"],"mappings":";;;;;AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAAQC,kBAAR,QAAiC,uBAAjC;AAEA,IAAMC,gBAAgB,GAAG,uBAAzB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AAACC,IAAAA,IAAI,EAAEJ;AAAP,GAAP;AAAA,CAAvB;;AACA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAW;AAACF,IAAAA,IAAI,EAAEH,gBAAP;AAAyBM,IAAAA,OAAO,EAAED;AAAlC,GAAX;AAAA,CAAvB;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AAACJ,IAAAA,IAAI,EAAEF;AAAP,GAAP;AAAA,CAAvB;;AAEA,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAAAC,MAAM;AAAA,SACzB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpBD,IAAAA,QAAQ,CAACR,cAAc,EAAf,CAAR;AACA,WAAOJ,kBAAkB,CAACW,MAAD,CAAlB,CACNG,IADM,CACD,UAAAP,IAAI,EAAI;AACRK,MAAAA,QAAQ,CAACN,cAAc,CAACC,IAAD,CAAf,CAAR;AACA,aAAOA,IAAP;AACL,KAJM,EAKNQ,KALM,CAKA,UAAAC,GAAG,EAAI;AACVJ,MAAAA,QAAQ,CAACH,cAAc,EAAf,CAAR;AACH,KAPM,CAAP;AAQP,GAX4B;AAAA,CAAtB;AAaP,IAAMQ,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE,KAFU;AAGjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,IAAI,EAAE;AAFJ;AAHW,CAArB;AASA,eAAexB,aAAa,uDACvBG,gBADuB,EACJ,UAACsB,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BACOD,KADP;AAEIL,IAAAA,OAAO,EAAE;AAFb;AAIH,CANuB,mCAWvBhB,gBAXuB,EAWJ,UAACqB,KAAD,EAAQC,MAAR,EAAmB;AAAA,6BACXA,MAAM,CAAChB,OAAP,CAAeY,IADJ;AAAA,MAC3BC,KAD2B,wBAC3BA,KAD2B;AAAA,MACpBC,IADoB,wBACpBA,IADoB;AAEnC,2BACOC,KADP;AAEIL,IAAAA,OAAO,EAAE,KAFb;AAGIE,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAALA,KADE;AACKC,MAAAA,IAAI,EAAJA;AADL;AAHV;AAOH,CApBuB,mCA4BvBnB,gBA5BuB,EA4BJ,UAACoB,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BACOD,KADP;AAEIL,IAAAA,OAAO,EAAE,KAFb;AAGIC,IAAAA,KAAK,EAAE;AAHX;AAKH,CAlCuB,oBAmCzBF,YAnCyB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport produce from 'immer';\nimport {getPostAPIByUserId} from '../../../src/api/post'\n\nconst GET_POST_PENDING = 'post/GET_POST_PENDING'\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS'\nconst GET_POST_FAILURE = 'post/GET_POST_FAILURE'\n\nconst getPostPending = () => ({type: GET_POST_PENDING})\nconst getPostSuccess = (text) => ({type: GET_POST_SUCCESS, payload: text})\nconst getPostFailure = () => ({type: GET_POST_FAILURE})\n\nexport const getPost = userId => (\n    (dispatch, getState) => {\n        dispatch(getPostPending())\n        return getPostAPIByUserId(userId)\n        .then(text => {\n              dispatch(getPostSuccess(text))\n              return text\n        })\n        .catch(err => {\n            dispatch(getPostFailure())\n        })\n})\n\nconst initialState = {\n    pending: false,\n    error: false,\n    data: {\n        title: '',\n        body: ''\n    }\n}\n\nexport default handleActions({\n    [GET_POST_PENDING]: (state, action) => {\n        return {\n            ...state,\n            pending: true\n        };\n    },\n        // produce(state, draft =>\n        //     draft.pending = true\n        // )\n    // ,\n    [GET_POST_SUCCESS]: (state, action) => {\n        const { title, body } = action.payload.data;\n        return {\n            ...state,\n            pending: false,\n            data: {\n                title, body\n            }\n        };\n    },\n    // [GET_POST_SUCCESS]: (state, action) =>\n    //     produce((state, draft) => {\n    //         draft.pending = false\n    //         draft.data.title = action.payload.data.title\n    //         draft.data.body = action.payload.data.body\n    //     })\n    // ,\n    [GET_POST_FAILURE]: (state, action) => {\n        return {\n            ...state,\n            pending: false,\n            error: true\n        }\n    }\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}