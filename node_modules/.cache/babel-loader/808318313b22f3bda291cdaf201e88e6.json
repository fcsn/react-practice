{"ast":null,"code":"import _defineProperty from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { getCommentAPIByPostId } from '../../../src/api/comment';\nvar GET_COMMENT_LOADING = 'comment/GET_COMMENT_LOADING';\nvar GET_COMMENT_SUCCESS = 'comment/GET_COMMENT_SUCCESS';\nvar GET_COMMENT_FAILURE = 'comment/GET_COMMENT_FAILURE';\n\nvar getCommentLoading = function getCommentLoading() {\n  return {\n    type: GET_COMMENT_LOADING\n  };\n};\n\nvar getCommentSuccess = function getCommentSuccess(text) {\n  return {\n    type: GET_COMMENT_SUCCESS,\n    payload: text\n  };\n};\n\nvar getCommentFailure = function getCommentFailure() {\n  return {\n    type: GET_COMMENT_FAILURE\n  };\n};\n\nexport var getComment = function getComment(postId) {\n  return function (dispatch, getState) {\n    console.log(getState().post.data);\n    dispatch(function () {\n      return getCommentLoading();\n    });\n    return getCommentAPIByPostId(postId).then(function (text) {\n      return dispatch(getCommentSuccess(text));\n    }).catch(function (err) {\n      return dispatch(getCommentFailure());\n    });\n  };\n};\nvar initialState = {\n  comment: null\n};\nexport default handleActions(_defineProperty({}, GET_COMMENT_SUCCESS, function (state, action) {\n  return {\n    comment: action.payload.data\n  };\n}), initialState);","map":{"version":3,"sources":["/Users/seonghunshin/Documents/react-practice/src/store/modules/comment.js"],"names":["createAction","handleActions","produce","getCommentAPIByPostId","GET_COMMENT_LOADING","GET_COMMENT_SUCCESS","GET_COMMENT_FAILURE","getCommentLoading","type","getCommentSuccess","text","payload","getCommentFailure","getComment","postId","dispatch","getState","console","log","post","data","then","catch","err","initialState","comment","state","action"],"mappings":";AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAAQC,qBAAR,QAAoC,0BAApC;AAEA,IAAMC,mBAAmB,GAAG,6BAA5B;AACA,IAAMC,mBAAmB,GAAG,6BAA5B;AACA,IAAMC,mBAAmB,GAAG,6BAA5B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AAACC,IAAAA,IAAI,EAAEJ;AAAP,GAAP;AAAA,CAA1B;;AACA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI;AAAA,SAAK;AAACF,IAAAA,IAAI,EAAEH,mBAAP;AAA4BM,IAAAA,OAAO,EAAED;AAArC,GAAL;AAAA,CAA9B;;AACA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AAACJ,IAAAA,IAAI,EAAEF;AAAP,GAAP;AAAA,CAA1B;;AAEA,OAAO,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAAAC,MAAM;AAAA,SAC5B,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,GAAGG,IAAX,CAAgBC,IAA5B;AACAL,IAAAA,QAAQ,CAAC;AAAA,aAAMR,iBAAiB,EAAvB;AAAA,KAAD,CAAR;AACA,WAAOJ,qBAAqB,CAACW,MAAD,CAArB,CACNO,IADM,CACD,UAAAX,IAAI;AAAA,aAAIK,QAAQ,CAACN,iBAAiB,CAACC,IAAD,CAAlB,CAAZ;AAAA,KADH,EAENY,KAFM,CAEA,UAAAC,GAAG;AAAA,aAAIR,QAAQ,CAACH,iBAAiB,EAAlB,CAAZ;AAAA,KAFH,CAAP;AAGH,GAP2B;AAAA,CAAzB;AAUP,IAAMY,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AADQ,CAArB;AAIA,eAAexB,aAAa,qBACvBI,mBADuB,EACD,UAACqB,KAAD,EAAQC,MAAR;AAAA,SAAoB;AACvCF,IAAAA,OAAO,EAAEE,MAAM,CAAChB,OAAP,CAAeS;AADe,GAApB;AAAA,CADC,GAIzBI,YAJyB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport produce from 'immer'\nimport {getCommentAPIByPostId} from '../../../src/api/comment'\n\nconst GET_COMMENT_LOADING = 'comment/GET_COMMENT_LOADING'\nconst GET_COMMENT_SUCCESS = 'comment/GET_COMMENT_SUCCESS'\nconst GET_COMMENT_FAILURE = 'comment/GET_COMMENT_FAILURE'\n\nconst getCommentLoading = () => ({type: GET_COMMENT_LOADING})\nconst getCommentSuccess = text => ({type: GET_COMMENT_SUCCESS, payload: text})\nconst getCommentFailure = () => ({type: GET_COMMENT_FAILURE})\n\nexport const getComment = postId => (\n    (dispatch, getState) => {\n        console.log(getState().post.data)\n        dispatch(() => getCommentLoading())\n        return getCommentAPIByPostId(postId)\n        .then(text => dispatch(getCommentSuccess(text)))\n        .catch(err => dispatch(getCommentFailure()))\n    }\n)\n\nconst initialState = {\n    comment: null\n}\n\nexport default handleActions({\n    [GET_COMMENT_SUCCESS]: (state, action) => ({\n        comment: action.payload.data\n    })\n}, initialState)\n"]},"metadata":{},"sourceType":"module"}