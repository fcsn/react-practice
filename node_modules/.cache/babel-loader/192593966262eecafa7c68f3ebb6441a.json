{"ast":null,"code":"import _defineProperty from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _handleActions;\n\nimport { createAction, handleActions } from 'redux-actions';\nimport axios from 'axios';\nimport produce from 'immer';\n\nfunction getPostAPI(id) {\n  return axios.get(\"https://jsonplaceholder.typicode.com/posts/\".concat(id));\n}\n\nvar GET_POST = 'post/GET_POST';\nvar GET_POST_PENDING = 'post/GET_POST_PENDING';\nvar GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\nvar GET_POST_FAILURE = 'post/GET_POST_FAILURE';\nexport var getPost = function getPost(id) {\n  return {\n    type: GET_POST,\n    payload: getPostAPI(id)\n  };\n};\nvar initialState = {\n  pending: false,\n  error: false,\n  data: {\n    title: '',\n    body: ''\n  }\n};\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, GET_POST_PENDING, function (state, action) {\n  return _objectSpread({}, state, {\n    pending: true,\n    error: false\n  });\n}), _defineProperty(_handleActions, GET_POST_SUCCESS, function (state, action) {\n  var _action$payload$data = action.payload.data,\n      title = _action$payload$data.title,\n      body = _action$payload$data.body;\n  return _objectSpread({}, state, {\n    pending: false,\n    data: {\n      title: title,\n      body: body\n    }\n  });\n}), _defineProperty(_handleActions, GET_POST_FAILURE, function (state, action) {\n  return _objectSpread({}, state, {\n    pending: false,\n    error: true\n  });\n}), _handleActions), initialState);","map":{"version":3,"sources":["/Users/seonghunshin/Documents/react-practice/src/store/modules/post.js"],"names":["createAction","handleActions","axios","produce","getPostAPI","id","get","GET_POST","GET_POST_PENDING","GET_POST_SUCCESS","GET_POST_FAILURE","getPost","type","payload","initialState","pending","error","data","title","body","state","action"],"mappings":";;;;;AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,OAApB;;AAEA,SAASC,UAAT,CAAqBC,EAArB,EAAyB;AACrB,SAAOH,KAAK,CAACI,GAAN,sDAAwDD,EAAxD,EAAP;AACH;;AAED,IAAME,QAAQ,GAAG,eAAjB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAN,EAAE;AAAA,SAAK;AAC1BO,IAAAA,IAAI,EAAEL,QADoB;AAE1BM,IAAAA,OAAO,EAAET,UAAU,CAACC,EAAD;AAFO,GAAL;AAAA,CAAlB;AAKP,IAAMS,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE,KAFU;AAGjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,IAAI,EAAE;AAFJ;AAHW,CAArB;AASA,eAAelB,aAAa,uDACvBO,gBADuB,EACJ,UAACY,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BACOD,KADP;AAEIL,IAAAA,OAAO,EAAE,IAFb;AAGIC,IAAAA,KAAK,EAAE;AAHX;AAKH,CAPuB,mCAQvBP,gBARuB,EAQJ,UAACW,KAAD,EAAQC,MAAR,EAAmB;AAAA,6BACXA,MAAM,CAACR,OAAP,CAAeI,IADJ;AAAA,MAC3BC,KAD2B,wBAC3BA,KAD2B;AAAA,MACpBC,IADoB,wBACpBA,IADoB;AAGnC,2BACOC,KADP;AAEIL,IAAAA,OAAO,EAAE,KAFb;AAGIE,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAALA,KADE;AACKC,MAAAA,IAAI,EAAJA;AADL;AAHV;AAOH,CAlBuB,mCAmBvBT,gBAnBuB,EAmBJ,UAACU,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BACOD,KADP;AAEIL,IAAAA,OAAO,EAAE,KAFb;AAGIC,IAAAA,KAAK,EAAE;AAHX;AAKH,CAzBuB,oBA0BzBF,YA1ByB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport axios from 'axios';\nimport produce from 'immer'\n\nfunction getPostAPI (id) {\n    return axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`)\n}\n\nconst GET_POST = 'post/GET_POST'\nconst GET_POST_PENDING = 'post/GET_POST_PENDING'\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS'\nconst GET_POST_FAILURE = 'post/GET_POST_FAILURE'\n\nexport const getPost = id => ({\n    type: GET_POST,\n    payload: getPostAPI(id)\n})\n\nconst initialState = {\n    pending: false,\n    error: false,\n    data: {\n        title: '',\n        body: ''\n    }\n}\n\nexport default handleActions({\n    [GET_POST_PENDING]: (state, action) => {\n        return {\n            ...state,\n            pending: true,\n            error: false\n        };\n    },\n    [GET_POST_SUCCESS]: (state, action) => {\n        const { title, body } = action.payload.data;\n\n        return {\n            ...state,\n            pending: false,\n            data: {\n                title, body\n            }\n        };\n    },\n    [GET_POST_FAILURE]: (state, action) => {\n        return {\n            ...state,\n            pending: false,\n            error: true\n        }\n    }\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}