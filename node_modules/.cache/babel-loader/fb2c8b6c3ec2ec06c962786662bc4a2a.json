{"ast":null,"code":"import _defineProperty from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/seonghunshin/Documents/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _handleActions;\n\nimport { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { getPostAPI, getPostAPIByUserId } from '../../../src/api/post';\nvar GET_POST_PENDING = 'post/GET_POST_PENDING';\nvar GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\nvar GET_POST_FAILURE = 'post/GET_POST_FAILURE';\nvar GET_POST_BY_ID_PENDING = 'post/GET_POST_BY_ID_PENDING';\nvar GET_POST_BY_ID_SUCCESS = 'post/GET_POST_BY_ID_SUCCESS';\nvar GET_POST_BY_ID_FAILURE = 'post/GET_POST_BY_ID_FAILURE';\n\nvar getPostPending = function getPostPending() {\n  return {\n    type: GET_POST_PENDING\n  };\n};\n\nvar getPostSuccess = function getPostSuccess(text) {\n  return {\n    type: GET_POST_SUCCESS,\n    payload: text\n  };\n};\n\nvar getPostFailure = function getPostFailure() {\n  return {\n    type: GET_POST_FAILURE\n  };\n};\n\nvar getPostByIdPending = function getPostByIdPending() {\n  return {\n    type: GET_POST_BY_ID_PENDING\n  };\n};\n\nvar getPostByIdSuccess = function getPostByIdSuccess(list) {\n  return {\n    type: GET_POST_BY_ID_SUCCESS,\n    payload: list\n  };\n};\n\nvar getPostByIdFailure = function getPostByIdFailure() {\n  return {\n    type: GET_POST_BY_ID_FAILURE\n  };\n};\n\nexport var getPost = function getPost(num) {\n  return function (dispatch, getState) {\n    dispatch(getPostPending());\n    var a = getPostAPI(num);\n    console.log(a);\n    return getPostAPI(num).then(function (text) {\n      dispatch(getPostSuccess(text));\n      return text;\n    }).catch(function (err) {\n      dispatch(getPostFailure());\n    });\n  };\n};\nexport var getPostById = function getPostById(userId) {\n  return function (dispatch, getState) {\n    dispatch(getPostByIdPending());\n    return getPostAPIByUserId(userId).then(function (text) {\n      console.log(text);\n      dispatch(getPostByIdSuccess(text));\n    }).catch(function (err) {\n      dispatch(getPostByIdFailure());\n    });\n  };\n};\nvar initialState = {\n  pending: false,\n  error: false,\n  data: {\n    title: '',\n    body: ''\n  },\n  posts: []\n};\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, GET_POST_PENDING, function (state, action) {\n  return _objectSpread({}, state, {\n    pending: true\n  });\n}), _defineProperty(_handleActions, GET_POST_SUCCESS, function (state, action) {\n  var _action$payload$data = action.payload.data,\n      title = _action$payload$data.title,\n      body = _action$payload$data.body;\n  return _objectSpread({}, state, {\n    pending: false,\n    data: {\n      title: title,\n      body: body\n    }\n  });\n}), _defineProperty(_handleActions, GET_POST_BY_ID_SUCCESS, function (state, action) {\n  return {\n    posts: action.payload.data\n  };\n}), _defineProperty(_handleActions, GET_POST_FAILURE, function (state, action) {\n  return _objectSpread({}, state, {\n    pending: false,\n    error: true\n  });\n}), _handleActions), initialState);","map":{"version":3,"sources":["/Users/seonghunshin/Documents/react-practice/src/store/modules/post.js"],"names":["createAction","handleActions","produce","getPostAPI","getPostAPIByUserId","GET_POST_PENDING","GET_POST_SUCCESS","GET_POST_FAILURE","GET_POST_BY_ID_PENDING","GET_POST_BY_ID_SUCCESS","GET_POST_BY_ID_FAILURE","getPostPending","type","getPostSuccess","text","payload","getPostFailure","getPostByIdPending","getPostByIdSuccess","list","getPostByIdFailure","getPost","num","dispatch","getState","a","console","log","then","catch","err","getPostById","userId","initialState","pending","error","data","title","body","posts","state","action"],"mappings":";;;;;AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAAQC,UAAR,EAAoBC,kBAApB,QAA6C,uBAA7C;AAEA,IAAMC,gBAAgB,GAAG,uBAAzB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;AACA,IAAMC,gBAAgB,GAAG,uBAAzB;AAEA,IAAMC,sBAAsB,GAAG,6BAA/B;AACA,IAAMC,sBAAsB,GAAG,6BAA/B;AACA,IAAMC,sBAAsB,GAAG,6BAA/B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AAACC,IAAAA,IAAI,EAAEP;AAAP,GAAP;AAAA,CAAvB;;AACA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAW;AAACF,IAAAA,IAAI,EAAEN,gBAAP;AAAyBS,IAAAA,OAAO,EAAED;AAAlC,GAAX;AAAA,CAAvB;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AAACJ,IAAAA,IAAI,EAAEL;AAAP,GAAP;AAAA,CAAvB;;AAEA,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAO;AAACL,IAAAA,IAAI,EAAEJ;AAAP,GAAP;AAAA,CAA3B;;AACA,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,IAAI;AAAA,SAAK;AAACP,IAAAA,IAAI,EAAEH,sBAAP;AAA+BM,IAAAA,OAAO,EAAEI;AAAxC,GAAL;AAAA,CAA/B;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAO;AAACR,IAAAA,IAAI,EAAEF;AAAP,GAAP;AAAA,CAA3B;;AAEA,OAAO,IAAMW,OAAO,GAAG,SAAVA,OAAU,CAAAC,GAAG;AAAA,SACtB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpBD,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACA,QAAMc,CAAC,GAAGtB,UAAU,CAACmB,GAAD,CAApB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAOtB,UAAU,CAACmB,GAAD,CAAV,CACNM,IADM,CACD,UAAAd,IAAI,EAAI;AACRS,MAAAA,QAAQ,CAACV,cAAc,CAACC,IAAD,CAAf,CAAR;AACA,aAAOA,IAAP;AACL,KAJM,EAKNe,KALM,CAKA,UAAAC,GAAG,EAAI;AACVP,MAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACH,KAPM,CAAP;AAQP,GAbyB;AAAA,CAAnB;AAeP,OAAO,IAAMe,WAAW,GAAG,SAAdA,WAAc,CAAAC,MAAM;AAAA,SAC7B,UAACT,QAAD,EAAWC,QAAX,EAAwB;AACpBD,IAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AACA,WAAOb,kBAAkB,CAAC4B,MAAD,CAAlB,CACNJ,IADM,CACD,UAAAd,IAAI,EAAI;AACVY,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAS,MAAAA,QAAQ,CAACL,kBAAkB,CAACJ,IAAD,CAAnB,CAAR;AACH,KAJM,EAKNe,KALM,CAKA,UAAAC,GAAG,EAAI;AACVP,MAAAA,QAAQ,CAACH,kBAAkB,EAAnB,CAAR;AACH,KAPM,CAAP;AAQH,GAX4B;AAAA,CAA1B;AAcP,IAAMa,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE,KAFU;AAGjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,IAAI,EAAE;AAFJ,GAHW;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;AAUA,eAAetC,aAAa,uDACvBI,gBADuB,EACJ,UAACmC,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BACOD,KADP;AAEIN,IAAAA,OAAO,EAAE;AAFb;AAIH,CANuB,mCAWvB5B,gBAXuB,EAWJ,UAACkC,KAAD,EAAQC,MAAR,EAAmB;AAAA,6BACXA,MAAM,CAAC1B,OAAP,CAAeqB,IADJ;AAAA,MAC3BC,KAD2B,wBAC3BA,KAD2B;AAAA,MACpBC,IADoB,wBACpBA,IADoB;AAEnC,2BACOE,KADP;AAEIN,IAAAA,OAAO,EAAE,KAFb;AAGIE,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAALA,KADE;AACKC,MAAAA,IAAI,EAAJA;AADL;AAHV;AAOH,CApBuB,mCAqBvB7B,sBArBuB,EAqBE,UAAC+B,KAAD,EAAQC,MAAR;AAAA,SAAoB;AAC1CF,IAAAA,KAAK,EAAEE,MAAM,CAAC1B,OAAP,CAAeqB;AADoB,GAApB;AAAA,CArBF,mCA+BvB7B,gBA/BuB,EA+BJ,UAACiC,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BACOD,KADP;AAEIN,IAAAA,OAAO,EAAE,KAFb;AAGIC,IAAAA,KAAK,EAAE;AAHX;AAKH,CArCuB,oBAsCzBF,YAtCyB,CAA5B","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport produce from 'immer';\nimport {getPostAPI, getPostAPIByUserId} from '../../../src/api/post'\n\nconst GET_POST_PENDING = 'post/GET_POST_PENDING'\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS'\nconst GET_POST_FAILURE = 'post/GET_POST_FAILURE'\n\nconst GET_POST_BY_ID_PENDING = 'post/GET_POST_BY_ID_PENDING'\nconst GET_POST_BY_ID_SUCCESS = 'post/GET_POST_BY_ID_SUCCESS'\nconst GET_POST_BY_ID_FAILURE = 'post/GET_POST_BY_ID_FAILURE'\n\nconst getPostPending = () => ({type: GET_POST_PENDING})\nconst getPostSuccess = (text) => ({type: GET_POST_SUCCESS, payload: text})\nconst getPostFailure = () => ({type: GET_POST_FAILURE})\n\nconst getPostByIdPending = () => ({type: GET_POST_BY_ID_PENDING})\nconst getPostByIdSuccess = list => ({type: GET_POST_BY_ID_SUCCESS, payload: list})\nconst getPostByIdFailure = () => ({type: GET_POST_BY_ID_FAILURE})\n\nexport const getPost = num => (\n    (dispatch, getState) => {\n        dispatch(getPostPending())\n        const a = getPostAPI(num)\n        console.log(a)\n        return getPostAPI(num)\n        .then(text => {\n              dispatch(getPostSuccess(text))\n              return text\n        })\n        .catch(err => {\n            dispatch(getPostFailure())\n        })\n})\n\nexport const getPostById = userId => (\n    (dispatch, getState) => {\n        dispatch(getPostByIdPending())\n        return getPostAPIByUserId(userId)\n        .then(text => {\n            console.log(text)\n            dispatch(getPostByIdSuccess(text))\n        })\n        .catch(err => {\n            dispatch(getPostByIdFailure())\n        })\n    }\n)\n\nconst initialState = {\n    pending: false,\n    error: false,\n    data: {\n        title: '',\n        body: ''\n    },\n    posts: []\n}\n\nexport default handleActions({\n    [GET_POST_PENDING]: (state, action) => {\n        return {\n            ...state,\n            pending: true\n        };\n    },\n        // produce(state, draft =>\n        //     draft.pending = true\n        // )\n    // ,\n    [GET_POST_SUCCESS]: (state, action) => {\n        const { title, body } = action.payload.data;\n        return {\n            ...state,\n            pending: false,\n            data: {\n                title, body\n            }\n        };\n    },\n    [GET_POST_BY_ID_SUCCESS]: (state, action) => ({\n        posts: action.payload.data\n    }),\n    // [GET_POST_SUCCESS]: (state, action) =>\n    //     produce((state, draft) => {\n    //         draft.pending = false\n    //         draft.data.title = action.payload.data.title\n    //         draft.data.body = action.payload.data.body\n    //     })\n    // ,\n    [GET_POST_FAILURE]: (state, action) => {\n        return {\n            ...state,\n            pending: false,\n            error: true\n        }\n    }\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}